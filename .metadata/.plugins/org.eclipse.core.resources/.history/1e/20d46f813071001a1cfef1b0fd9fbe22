package comics;

import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Scanner;

public class Emprestimo {
	private LocalDate dataEmprestimo;
	private LocalDate dataDevolucao;
	private Revista comic;
	private Amigo friend;
	private int codigoEmprestimo;
	private boolean statusDevolucao;
	ArrayList<Emprestimo> emprestimo = new ArrayList<Emprestimo>();
	Revista revista;
	Amigo amigo;
	Scanner teclado = new Scanner(System.in);
	
	public LocalDate getDataEmprestimo() {
		dataEmprestimo = LocalDate.now();
		return dataEmprestimo;
	}
	public void setDataEmprestimo(LocalDate dataEmprestimo) {
		this.dataEmprestimo = LocalDate.now();
	}
	public LocalDate getDataDevolucao() {
		return dataDevolucao;
	}
	public void setDataDevolucao(LocalDate dataDevolucao) {
		this.dataDevolucao = dataDevolucao;
	}
	public Revista getComic() {
		return comic;
	}
	public void setComic(Revista comic) {
		this.comic = comic;
	}
	public Amigo getFriend() {
		return friend;
	}
	public void setFriend(Amigo friend) {
		this.friend = friend;
	}
	public boolean getStatusDevolucao () {
		return statusDevolucao;
	}
	public void setStatusDevolucao(boolean statusDevolucao) {
		this.statusDevolucao = false;
	}
	public int getCodigoEmprestimo() {
		return codigoEmprestimo;
	}
	public void setCodigoEmprestimo(int codigoEmprestimo) {
		this.codigoEmprestimo = codigoEmprestimo;
	}
	
	/*
	@Override
	public String toString() {
		return ("Edição: " + this.getNumeroEdicao() + "\n Ano: " + this.getAno() + "\n Caixa: " + this.getCaixa().getNumero() +
				"\n Coleção: " + this.getColecao().getNome() + "\n Emprestada? " + this.getEmprestada());
	}*/
	
	public void novoEmprestimo(Emprestimo loan, Revista revista, Amigo amigo) throws ParseException {
		setCodigoEmprestimo(codigoEmprestimo ++);
		amigo.imprimeAmigosCadastrados();
		System.out.println("Selecione Amigo(a) para o empréstimo");
		String amigoEmprestimo = teclado.nextLine();
				for (int i = 0; i < amigo.friend.size(); i++) {
					if(amigo.friend.get(i).getNome().equals(amigoEmprestimo)) {
						if(amigo.friend.get(i).getEmprestimoAtivo() == true) {
							System.out.println("Este amigo(a) já possui Empréstimo ativo. Efetue a devolução para continuar!");
						}else {
							amigo.friend.get(i).setEmprestimoAtivo(true);
							loan.setFriend(amigo.friend.get(i));
						}
					}
				}
		revista.listarRevistas();
		System.out.println("Informe o número da Edição da Revista Desejada: ");
		System.out.println("\n");
		int edicaoRevista = (teclado.nextInt());
			    for (int i = 0; i < revista.revista.size(); i++) {
					if(revista.revista.get(i).getNumeroEdicao() == edicaoRevista) {
						if (revista.revista.get(i).getEmprestada() == true ) {
							System.out.println("Revista indisponível para empréstimo! ");
						}else {
							revista.revista.get(i).setEmprestada(true);
							emprestimo.setComic(revista.revista.get(i));
						}
					}
			    }
		clearBuffer(teclado);
		System.out.println("Empréstimo de Quantos dias? ");
		int diasDevolucao = teclado.nextInt();
		emprestimo.setDataDevolucao(getDataEmprestimo().plusDays(diasDevolucao));
		DateTimeFormatter formataData = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		System.out.println("Data Emprestimo: " + emprestimo.getDataEmprestimo().format(formataData));
		System.out.println("Data de Devolução: " + emprestimo.getDataDevolucao().format(formataData));
		System.out.println("\n");
		System.out.println("Empréstimo realizado com Suceso! \n");
	}
	
	public void emprestimosAtivos() {
		System.out.println("\n");
		System.out.println("***** Emprestimos ativos ***** ");
		for (Emprestimo imprime : emprestimo) {
			if (imprime.getStatusDevolucao() == false) {
			System.out.println(imprime);
			}
		}
		System.out.println("\n");
	}
	
	public void emprestimosDevolvidos() {
		System.out.println("\n");
		System.out.println("***** Emprestimos Devolvidos ***** ");
		for (Emprestimo imprime : emprestimo) {
			if (imprime.getStatusDevolucao() == true) {
			System.out.println(imprime);
		}
		}
		System.out.println("\n");
	}
	
	public void devolucaoEmprestimo(Amigo amigo, Revista revista, Emprestimo loan) {
		System.out.println("Informe o código do empréstimo para Devolução");
		int codigoEmprestimo = teclado.nextInt();
		for (int i = 0; i < loan.emprestimo.size(); i++) {
			if (emprestimo.get(i).getStatusDevolucao() == true) {
				System.out.println("Este empréstimo já foi finalizado!");
			}
			for (int i = 0; i < colecao.colecao.size(); i++) {
				if(colecao.colecao.get(i).getNome().equals(nomeColecao)) {
					comic.setColecao(colecao.colecao.get(i));
				}
			}
			
			
			if(amigo.friend.get(i).getNome().equals(amigoEmprestimo)) {
				if(amigo.friend.get(i).getEmprestimoAtivo() == false) {
					
				}else {
					amigo.friend.get(i).setEmprestimoAtivo(false);
					Emprestimo emprestimo = 
					emprestimo.emprestimo.get(i)
					
				}
			}
		}
		
	}
	
	
	private void clearBuffer(Scanner teclado) {
		if (teclado.hasNextLine()) {
			teclado.nextLine();
		}
		
	}
}
	
	
	
	
	

